Source: ros-melodic-pygame-managed-player
Section: misc
Priority: optional
Maintainer: Marc Hanheide <marc@hanheide.net>
Build-Depends: debhelper (>= 9.0.0), ros-melodic-catkin, ros-melodic-rospy, ros-melodic-rostest, ros-melodic-std-msgs, ros-melodic-std-srvs
Homepage: https://github.com/strands-project/strands_ui
Standards-Version: 3.9.2

Package: ros-melodic-pygame-managed-player
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, python-pygame, ros-melodic-message-runtime, ros-melodic-rospy
Description: This implements a pygame based player class that can (and should) be instantiated in any sound playing nodes (e.g.
 Mary, Music player of the walking group, sample playing for navigation feedback, etc.) It uses some negotiation between different instances of this class using a shared ROS topic and priorities to control the volume. E.g. speech output should be set to a high priority (1.0), ensuring that it always take preference over e.g. music (by assigning a music playing node a priority of 0.8). The volume is controlled by min_vol and max_vol, being floats between 0.0 (muted) and 1.0 (max volume). The player sets the volume to min_vol when another player with higher priority starts playing and sets it back to max_vol when that other component stops. Furthermore, the class wraps the strange pygame event handling into an event-driven framework, where programmers can register a stop_callback to be called whenever the playing ends. Also, optionally, play methods can be used blocking to wait for a tune to finish playing.
